name: Continuous Integration
on: 
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]
jobs:
  ci:
    runs-on: ubuntu-24.04
    env:
      DOCKER_INTERACTIVE: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup Docker Compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: '2.29.7'
      
      - name: Install Task
        uses: go-task/setup-task@v1
      
      - name: Repository lampy
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: 'v4.0'
          repository: koromerzhin/lampy
          path: lampy
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
      
      - name: Install npm dependencies
        run: npm install
      - name: Setup environment files
        run: |
          cp apps/.env.test apps/.env
          cp .env.example .env
      - name: 'Encore build'
        run: npm run encore:build
      - name: 'SET BDD'
        run: task labstag:copysql
      - name: 'Launch Lampy'
        run: cd lampy && task lampy:exec
      - name: 'Image pull'
        run: task labstag:getpull-image
      - name: "Launch first composer install"
        run: task labstag:install-first
      - name: 'Build containers'
        run: task labstag:deploy
      - name: 'Waiting'
        run: task labstag:waiting
      - name: linter readme.md
        run: npm run lint:markdown
      - name: linter SCSS
        run: npm run lint:stylelint:fix
      - name: "install PHAR"
        run: task labstag:download-phar
      - name: 'docker ls'
        run: task labstag:ls
      - name: Set permissions
        run: |
          sudo chown -R $USER:$USER ./apps
          sudo chmod -R 775 ./apps
          sudo chown -R $USER:$USER ./apps/public
          sudo chmod -R 775 ./apps/public
      - name: 'Symfony about'
        run: task symfony:about
      - name: linter PHP Code Sniffer
        run: task lint:phpcs:error
      - name: linter PHP MD
        run: task lint:phpmd
      - name: linter PHPMND
        run: task lint:phpmnd
      - name: Linter twig
        run: task lint:twig
      - name: Linter yaml
        run: task lint:yaml
      - name: linter phpstan
        run: task phpstan:0
      - name: Add assets
        run: task labstag:assets
      
      - name: Database setup
        run: |
          task doctrine:migrate
          task doctrine:schema:update
          task doctrine:schema:validate
          task doctrine:fixtures
      - name: 'Delete old files'
        run: task labstag:delete-oldfiles
      - name: Cypress run
        uses: cypress-io/github-action@v6
        continue-on-error: true
      - name: Set date and branch variables
        run: |
          echo "CURRENT_DATE=$(date '+%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Archive screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "labstag-${{ github.ref_name }}_${{ env.CURRENT_DATE }}"
          path: cypress/screenshots
          retention-days: 7
          if-no-files-found: ignore